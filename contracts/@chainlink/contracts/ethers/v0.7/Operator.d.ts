/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OperatorInterface extends Interface {
  functions: {
    EXPIRY_TIME: TypedFunctionDescription<{ encode([]: []): string }>;

    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    cancelOracleRequest: TypedFunctionDescription<{
      encode([requestId, payment, callbackFunc, expiration]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    forward: TypedFunctionDescription<{
      encode([_to, _data]: [string, Arrayish]): string;
    }>;

    fulfillOracleRequest: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    getAuthorizationStatus: TypedFunctionDescription<{
      encode([node]: [string]): string;
    }>;

    getChainlinkToken: TypedFunctionDescription<{ encode([]: []): string }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([_sender, _amount, _data]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    oracleRequest: TypedFunctionDescription<{
      encode([
        sender,
        payment,
        specId,
        callbackAddress,
        callbackFunctionId,
        nonce,
        dataVersion,
        data
      ]: [
        string,
        BigNumberish,
        Arrayish,
        string,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setFulfillmentPermission: TypedFunctionDescription<{
      encode([node, allowed]: [string, boolean]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;

    withdrawable: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    CancelOracleRequest: TypedEventDescription<{
      encodeTopics([requestId]: [Arrayish | null]): string[];
    }>;

    OracleRequest: TypedEventDescription<{
      encodeTopics([
        specId,
        requester,
        requestId,
        payment,
        callbackAddr,
        callbackFunctionId,
        cancelExpiration,
        dataVersion,
        data
      ]: [
        Arrayish | null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class Operator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Operator;
  attach(addressOrName: string): Operator;
  deployed(): Promise<Operator>;

  on(event: EventFilter | string, listener: Listener): Operator;
  once(event: EventFilter | string, listener: Listener): Operator;
  addListener(eventName: EventFilter | string, listener: Listener): Operator;
  removeAllListeners(eventName: EventFilter | string): Operator;
  removeListener(eventName: any, listener: Listener): Operator;

  interface: OperatorInterface;

  functions: {
    EXPIRY_TIME(): Promise<BigNumber>;

    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunc: Arrayish,
      expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    forward(
      _to: string,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAuthorizationStatus(node: string): Promise<boolean>;

    getChainlinkToken(): Promise<string>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    oracleRequest(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    setFulfillmentPermission(
      node: string,
      allowed: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawable(): Promise<BigNumber>;
  };

  EXPIRY_TIME(): Promise<BigNumber>;

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackFunc: Arrayish,
    expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  forward(
    _to: string,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fulfillOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAuthorizationStatus(node: string): Promise<boolean>;

  getChainlinkToken(): Promise<string>;

  onTokenTransfer(
    _sender: string,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  oracleRequest(
    sender: string,
    payment: BigNumberish,
    specId: Arrayish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  setFulfillmentPermission(
    node: string,
    allowed: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawable(): Promise<BigNumber>;

  filters: {
    CancelOracleRequest(requestId: Arrayish | null): EventFilter;

    OracleRequest(
      specId: Arrayish | null,
      requester: null,
      requestId: null,
      payment: null,
      callbackAddr: null,
      callbackFunctionId: null,
      cancelExpiration: null,
      dataVersion: null,
      data: null
    ): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    EXPIRY_TIME(): Promise<BigNumber>;

    acceptOwnership(): Promise<BigNumber>;

    cancelOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunc: Arrayish,
      expiration: BigNumberish
    ): Promise<BigNumber>;

    forward(_to: string, _data: Arrayish): Promise<BigNumber>;

    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    getAuthorizationStatus(node: string): Promise<BigNumber>;

    getChainlinkToken(): Promise<BigNumber>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;

    oracleRequest(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    setFulfillmentPermission(
      node: string,
      allowed: boolean
    ): Promise<BigNumber>;

    transferOwnership(_to: string): Promise<BigNumber>;

    withdraw(recipient: string, amount: BigNumberish): Promise<BigNumber>;

    withdrawable(): Promise<BigNumber>;
  };
}
