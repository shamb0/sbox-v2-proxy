/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { Arrayish } from "ethers/utils";

import { TransactionOverrides } from ".";
import { VRFTestnetD20 } from "./VRFTestnetD20";

export class VRFTestnetD20Factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _vrfCoordinator: string,
    _link: string,
    _keyHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<VRFTestnetD20> {
    return super.deploy(_vrfCoordinator, _link, _keyHash, overrides) as Promise<
      VRFTestnetD20
    >;
  }
  getDeployTransaction(
    _vrfCoordinator: string,
    _link: string,
    _keyHash: Arrayish,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _link,
      _keyHash,
      overrides
    );
  }
  attach(address: string): VRFTestnetD20 {
    return super.attach(address) as VRFTestnetD20;
  }
  connect(signer: Signer): VRFTestnetD20Factory {
    return super.connect(signer) as VRFTestnetD20Factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFTestnetD20 {
    return new Contract(address, _abi, signerOrProvider) as VRFTestnetD20;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_link",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "d20Results",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "latestRoll",
    outputs: [
      {
        internalType: "uint256",
        name: "d20result",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256"
      }
    ],
    name: "rawFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_seed",
        type: "uint256"
      }
    ],
    name: "requestRandomness",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userProvidedSeed",
        type: "uint256"
      }
    ],
    name: "rollDice",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161084f38038061084f8339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606083811b821660a05284901b16608052600255670de0b6b3a76400006003556001600160a01b0391821691166107b161009e6000398061016c52806103d952508061021f528061039d52506107b16000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063acfff37711610050578063acfff377146100e8578063ae383a4d14610105578063dc6cfe101461010d57610072565b80634ab5fc501461007757806394985ddd146100a65780639e317f12146100cb575b600080fd5b6100946004803603602081101561008d57600080fd5b5035610136565b60408051918252519081900360200190f35b6100c9600480360360408110156100bc57600080fd5b5080359060200135610154565b005b610094600480360360208110156100e157600080fd5b5035610206565b610094600480360360208110156100fe57600080fd5b5035610218565b610094610355565b6100946004803603606081101561012357600080fd5b5080359060208101359060400135610399565b6001818154811061014357fe5b600091825260209091200154905081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b6102028282610582565b5050565b60006020819052908152604090205481565b60006003547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d60208110156102e457600080fd5b5051101561033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610751602b913960400191505060405180910390fd5b600061034e60025460035485610399565b9392505050565b60018054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061038957fe5b9060005260206000200154905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000085878660405160200180838152602001828152602001925050506040516020818303038152906040526040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104a557818101518382015260200161048d565b50505050905090810190601f1680156104d25780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156104f357600080fd5b505af1158015610507573d6000803e3d6000fd5b505050506040513d602081101561051d57600080fd5b505060008481526020819052604081205461053d908690859030906105dd565b60008681526020819052604090205490915061056090600163ffffffff61063116565b60008681526020819052604090205561057985826106a5565b95945050505050565b60006105a6600161059a84601463ffffffff6106d116565b9063ffffffff61063116565b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155505050565b604080516020808201969096528082019490945273ffffffffffffffffffffffffffffffffffffffff9290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60008282018381101561034e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60008161073f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b81838161074857fe5b06939250505056fe4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e7472616374207769746820666175636574a2646970667358221220f7e4890b29a9c1a5f804be3ac670cb66c4ad7c39773f6a451d5c31e374dee0d764736f6c63430006060033";
